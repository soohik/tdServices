// Package dataservice and it's sub-package represents data persistence service, mainly access database,
// but also including data persisted by other Micro-service.
// For Micro-server, only the interface is defined in this package, the data transformation code is in adapter package
// This is the top level package and it only defines interface, and all implementations are defined in sub-package
// Use case package depends on it.
package dataservice

import "tdimpl/model"

// UserDataInterface represents interface for user data access through database
type UserDataInterface interface {
	// // Remove deletes a user by user name from database.
	// Remove(username string) (rowsAffected int64, err error)
	// // Find retrieves a user from database based on a user's id
	// Find(id int) (*model.User, error)
	// // FindByName retrieves a user from database by User.Name
	// FindByName(name string) (user *model.User, err error)
	// // FindAll retrieves all users from database as an array of user
	// FindAll() ([]model.User, error)
	// // Update changes user information on the User.Id passed in.
	// Update(user *model.User) (rowsAffected int64, err error)
	// Insert adds a user to a database. The returned resultUser has a Id, which is auto generated by database
	Insert(user *model.Phone) (resultUser *model.Phone, err error)
	// Need to add this for transaction support

}

// CacheDataInterface represents interface for cache service, which is a micro-service
type CacheDataInterface interface {
	// Get handles call to Get function on Cache service
	Get(key string) ([]byte, error)
	// Store handles call to Store function on Cache service
	Store(key string, value []byte) error
}

// CourseDataInterface represents interface for persistence service for course data
// It is created for POC of courseDataServiceFactory, no real use.
type CourseDataInterface interface {
}
